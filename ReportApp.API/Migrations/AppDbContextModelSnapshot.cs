// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReportApp.API.Models;

#nullable disable

namespace ReportApp.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReportApp.Shared.Attachments", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<int>("BugReportId")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentId");

                    b.HasIndex("BugReportId")
                        .IsUnique();

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.ToTable("Attachment");

                    b.HasData(
                        new
                        {
                            AttachmentId = 1,
                            BugReportId = 1,
                            FeedbackId = 1,
                            FileName = "File1",
                            FilePath = "http://api.com"
                        });
                });

            modelBuilder.Entity("ReportApp.Shared.BugReport", b =>
                {
                    b.Property<int>("BugReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BugReportId"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BugReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Bugs");

                    b.HasData(
                        new
                        {
                            BugReportId = 1,
                            AttachmentId = 1,
                            Description = "Application crashes when clicking on button X",
                            Timestamp = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ReportApp.Shared.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Question2")
                        .HasColumnType("int");

                    b.Property<bool>("Question3")
                        .HasColumnType("bit");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            AttachmentId = 1,
                            Comments = "Great job!",
                            Question1 = "Friend's recommendation",
                            Question2 = 4,
                            Question3 = true,
                            Ranking = 2,
                            Timestamp = new DateTime(2023, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ReportApp.Shared.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "teste@gadsakm.com",
                            UserName = "Lucas"
                        });
                });

            modelBuilder.Entity("ReportApp.Shared.Attachments", b =>
                {
                    b.HasOne("ReportApp.Shared.BugReport", "BugReport")
                        .WithOne("Attachment")
                        .HasForeignKey("ReportApp.Shared.Attachments", "BugReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReportApp.Shared.Feedback", "Feedback")
                        .WithOne("Attachment")
                        .HasForeignKey("ReportApp.Shared.Attachments", "FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BugReport");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("ReportApp.Shared.BugReport", b =>
                {
                    b.HasOne("ReportApp.Shared.User", "User")
                        .WithMany("BugReport")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReportApp.Shared.Feedback", b =>
                {
                    b.HasOne("ReportApp.Shared.User", "User")
                        .WithMany("Feedback")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReportApp.Shared.BugReport", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("ReportApp.Shared.Feedback", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("ReportApp.Shared.User", b =>
                {
                    b.Navigation("BugReport");

                    b.Navigation("Feedback");
                });
#pragma warning restore 612, 618
        }
    }
}
