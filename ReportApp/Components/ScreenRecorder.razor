@page "/ScreenRecorder"

@inherits Microsoft.AspNetCore.Components.ComponentBase
@using ReportApp.Components
@using static ReportApp.Components.AddScreenRecorder;

<h1>ScreenRecorder</h1>

<button @onclick="StartRecording">Start Recording</button>
<button @onclick="StopRecording">Stop Recording</button>

<video id="preview" autoplay></video>
<video id="recording" controls></video>

@if (!string.IsNullOrEmpty(logText))
{
    <pre id="log">@logText</pre>
}

@if (downloadLinkVisible)
{
    <div id="downloadContainer">
        <a href="@downloadUrl" download="RecordedVideo.webm">Download Video</a>
    </div>
}

<ScreenCapture @ref="screenCapture"></ScreenCapture>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private string logText = "";
    private bool downloadLinkVisible = false;
    private string downloadUrl = "";
    private ScreenCapture screenCapture;

    private async Task Log(string msg)
    {
        logText += msg + "\n";
    }

    private async Task StartRecording()
    {
        var stream = await JSRuntime.InvokeAsync<IJSObjectReference>("navigator.mediaDevices.getDisplayMedia",
            new { video = true, audio = true });

        await JSRuntime.InvokeVoidAsync("startRecording", stream, 10000);
    }

    private async Task StopRecording()
    {
        await JSRuntime.InvokeVoidAsync("stopRecording", preview);
    }

    [JSInvokable]
    public void HandleRecordingData(byte[] data)
    {
        // Lidar com os dados recebidos aqui
        Log($"Received {data.Length} bytes of recorded data.");

        // Quando a gravação estiver completa, permita que o usuário faça o download
        if (data.Length > 0)
        {
            CreateBlobAndDownload(data);
        }
    }

    private async Task CreateBlobAndDownload(byte[] data)
    {
        if (data.Length > 0)
        {
            var objectURL = await JSRuntime.InvokeAsync<string>("createBlobAndGetObjectURL", data, "video/webm");
            downloadUrl = objectURL;
            downloadLinkVisible = true;

            // Atualiza o estado do componente para re-renderizar a interface do usuário
            StateHasChanged();
        }
    }
}