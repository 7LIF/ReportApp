@using System.IO
@inject HttpClient Http


@if (ShowReportForm)
{
	<div class=" modals ">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="titleLabel">Feedback Report</h5>
			</div>
			<div class="modal-body">
				<EditForm Model="@Feedback">
				<div class="rating star-container">
					<input type="radio" name="star" id="star5"><label for="star5" @onclick="() => UpdateRating(5)"></label>
					<input type="radio" name="star" id="star4"><label for="star4" @onclick="() => UpdateRating(4)"></label>
					<input type="radio" name="star" id="star3"><label for="star3" @onclick="() => UpdateRating(3)"></label>
					<input type="radio" name="star" id="star2"><label for="star2" @onclick="() => UpdateRating(2)"></label>
					<input type="radio" name="star" id="star1"><label for="star1" @onclick="() => UpdateRating(1)"></label>
				</div>
				</EditForm>
			<br />
				<EditForm Model="@User">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="form-group">
						<label for="UserName">Name: </label>
						<InputText id="userName" class="form-control" @bind-Value="@User.UserName" placeholder="Enter your name"></InputText>
						<ValidationMessage For="@(() => User.UserName)" />
					</div>
					<br/>
					<div class="form-group">
						<label for="email">Email: </label>
						<InputText id="email" class="form-control" @bind-Value="@User.Email" placeholder="Enter email"></InputText>
						<ValidationMessage For="@(() => User.Email)" />
					</div>
				</EditForm>
				<EditForm Model="@Feedback">

					<DataAnnotationsValidator />
					<ValidationSummary />

					<br />

					<div class="form-group">
						<label for="Comments">Comments: </label>
						<InputTextArea id="Comments" class="form-control" @bind-Value="@Feedback.Comments" placeholder="Comments"></InputTextArea>
						<ValidationMessage For="@(() => Feedback.Comments)" />
					</div>

					<br />

					<div class="input-group">
						<div class="custom-file">
							<InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/jpeg, image/png, image/gif, video/*" id="inputFile" />
							<label class="custom-file-label" for="inputFile">Choose file</label>
						</div>
						<div class="input-group-append">
							<button class="btn btn-success" @onclick="Upload" disabled="@isDisable">Upload</button>
						</div>
					</div>

					@foreach (var item in filesBase64)
					{
						@if (item.ContentType.StartsWith("image"))
						{
							<img src="data:@item.ContentType;base64,@item.Base64data" />
						}
						else if (item.ContentType.StartsWith("video"))
						{
							<video controls>
								<source src="data:@item.ContentType;base64,@item.Base64data" type="@item.ContentType" />
								Your browser does not support the video tag.
							</video>
						}
					}

					@code {
						List<Attachments> filesBase64 = new List<Attachments>();
						string message = "InputFile Example";
						bool isDisable = false;

						async Task OnChange(InputFileChangeEventArgs e)
						{
							var files = e.GetMultipleFiles();

							foreach (var file in files)
							{
								var buf = new byte[file.Size];

								using (var stream = file.OpenReadStream())
								{
									await stream.ReadAsync(buf);
								}

								filesBase64.Add(new Attachments { Base64data = Convert.ToBase64String(buf), ContentType = file.ContentType, FileName = file.Name });
							}

							message = "Click UPLOAD to continue";
						}

						async Task Upload()
						{
							isDisable = true;

							using (var msg = await Http.PostAsJsonAsync<List<Attachments>>("https://localhost:7046/api/att", filesBase64, System.Threading.CancellationToken.None))
							{
								isDisable = false;

								if (msg.IsSuccessStatusCode)
								{
									message = $"{filesBase64.Count} files uploaded";

									filesBase64.Clear();
								}
							}
						}
					}

				</EditForm>
			<br />

			<button @onclick="nextcomponent" class="btn btn-dark" disabled="@(!AreFieldsFilled)">Next</button>

			</div>
		</div>
	</div>
}

@if(Questions == true)
{
	<div class="modals">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="titleLabel">Feedback Report</h5>
				<button type="button" class="close" @onclick="@Close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<EditForm Model="@Feedback" OnValidSubmit="@HandleValidSubmit">
						<div class="form-group">
				
							<label>How did you first learn about our app? </label>
							<InputText id="Question1" class="form-control" @bind-Value="@Feedback.Question1" placeholder="Question1"></InputText>
							<ValidationMessage For="@(() => Feedback.Question1)" />

						</div>
						<br />
						<div class="form-group">
							<label>On a scale of 1 to 5, rate the interface of the mobile application. </label>
							<InputNumber id="Question2" class="form-control" @bind-Value="@Feedback.Question2" min="1" max="5" placeholder="Question2"></InputNumber>
							<ValidationMessage For="@(() => Feedback.Question2)" />
						</div>
						<br />
					<div class="form-group">
						<label>Would you recommend this app to your family and friends? </label>
						<InputText class="form-control" @bind-Value="@recommendationInput" />
					</div>

						<br/>
					<br />
					<button @onclick="PreviousComponent" class="btn btn-dark">back</button>
					<button type="submit" class="btn btn-light" style="border:2px solid black; border-radius:5px">Send</button>
				</EditForm>
			</div>
		</div>
	</div>
}


<style>
	
	.modals {
		display: flex;
		margin: 20px;
		justify-content: flex-start;
		align-items: center;
		border: 2px solid black;
		border-radius: 10px;
		box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
	}

	.rating {
		gap:10px;
		position:relative;
		padding:0;
		margin:0;
		display: flex;
		flex-direction:row-reverse;
		justify-content:center;
		align-items:center;
	}

	.rating input {
		display: none;
	}

	.rating label {
		display: block;
		cursor: pointer;
		width: 30px;
	}

		.rating label:before {
			content: '\f005';
			font-family: fontAwesome;
			position: relative;
			display: block;
			font-size: 30px;
			color: #0e1316;
		}

		.rating label:after {
			content: '\f005';
			font-family: fontAwesome;
			position: absolute;
			display: block;
			font-size: 30px;
			color: #ffff00;
			top: 0;
			opacity: 0;
			transition: .5;
			text-shadow: 0 4px 5px rgba(0, 0, 0, .5);
		}

		.rating label:hover:after,
		.rating label:hover ~ label:after,
		.rating input:checked ~ label:after {
			opacity: 1;
		}
</style>